class Sys {
    
    function void fillScreen(int color) {
        var int i, highByte, lowByte;

        // Set Column Address
        do SPI.writeChar(42);     // 0x2A
        do SPI.writeChar(0);      // 0x00 - Start column high byte
        do SPI.writeChar(0);      // 0x00 - Start column low byte
        do SPI.writeChar(0);      // 0x00 - End column high byte
        do SPI.writeChar(239);    // 0xEF - End column low byte (240 - 1)

        // Set Row Address
        do SPI.writeChar(43);     // 0x2B
        do SPI.writeChar(0);      // 0x00 - Start row high byte
        do SPI.writeChar(0);      // 0x00 - Start row low byte
        do SPI.writeChar(1);      // 0x01 - End row high byte
        do SPI.writeChar(63);     // 0x3F - End row low byte (320 - 1)

        // Write Memory Start
        do SPI.writeChar(44);     // 0x2C

        // Set color bytes
        let highByte = color / 256;
        let lowByte = color - ((color / 256) * 256); // color % 256


        // Fill the screen with the specified color
        let i = 0;
        while (i < 320 * 240) {
            do SPI.writeChar(highByte);  // High byte of color
            do SPI.writeChar(lowByte);   // Low byte of color
            let i = i + 1;
        }

        return;
    }

    function void wait(int duration) {
        var int i;
        let i = 0;
        while (i < duration) {
            let i = i + 1;
        }
        return;
    }

    function void init() {
        var int i;

        // // Initialization sequence for the LCD (if needed)
        // Send initialization commands
        do SPI.writeChar(239); do SPI.writeChar(3); do SPI.writeChar(3); do SPI.writeChar(128); do SPI.writeChar(2); // 0xEF, 3, 0x03, 0x80, 0x02
        do SPI.writeChar(207); do SPI.writeChar(3); do SPI.writeChar(0); do SPI.writeChar(193); do SPI.writeChar(48); // 0xCF, 3, 0x00, 0xC1, 0x30
        do SPI.writeChar(237); do SPI.writeChar(4); do SPI.writeChar(100); do SPI.writeChar(3); do SPI.writeChar(18); do SPI.writeChar(129); // 0xED, 4, 0x64, 0x03, 0x12, 0x81
        do SPI.writeChar(232); do SPI.writeChar(3); do SPI.writeChar(133); do SPI.writeChar(0); do SPI.writeChar(120); // 0xE8, 3, 0x85, 0x00, 0x78
        do SPI.writeChar(203); do SPI.writeChar(5); do SPI.writeChar(57); do SPI.writeChar(44); do SPI.writeChar(0); do SPI.writeChar(52); do SPI.writeChar(2); // 0xCB, 5, 0x39, 0x2C, 0x00, 0x34, 0x02
        do SPI.writeChar(247); do SPI.writeChar(1); do SPI.writeChar(32); // 0xF7, 1, 0x20
        do SPI.writeChar(234); do SPI.writeChar(2); do SPI.writeChar(0); do SPI.writeChar(0); // 0xEA, 2, 0x00, 0x00
        do SPI.writeChar(192); do SPI.writeChar(1); do SPI.writeChar(35); // 0xC0, 1, 0x23
        do SPI.writeChar(193); do SPI.writeChar(1); do SPI.writeChar(16); // 0xC1, 1, 0x10
        do SPI.writeChar(197); do SPI.writeChar(2); do SPI.writeChar(62); do SPI.writeChar(40); // 0xC5, 2, 0x3e, 0x28
        do SPI.writeChar(199); do SPI.writeChar(1); do SPI.writeChar(134); // 0xC7, 1, 0x86
        do SPI.writeChar(54); do SPI.writeChar(1); do SPI.writeChar(72); // 0x36, 1, 0x48
        do SPI.writeChar(55); do SPI.writeChar(1); do SPI.writeChar(0); // 0x37, 1, 0x00
        do SPI.writeChar(58); do SPI.writeChar(1); do SPI.writeChar(85); // 0x3A, 1, 0x55
        do SPI.writeChar(177); do SPI.writeChar(2); do SPI.writeChar(0); do SPI.writeChar(24); // 0xB1, 2, 0x00, 0x18
        do SPI.writeChar(182); do SPI.writeChar(3); do SPI.writeChar(8); do SPI.writeChar(130); do SPI.writeChar(39); // 0xB6, 3, 0x08, 0x82, 0x27
        do SPI.writeChar(242); do SPI.writeChar(1); do SPI.writeChar(0); // 0xF2, 1, 0x00
        do SPI.writeChar(38); do SPI.writeChar(1); do SPI.writeChar(1); // 0x26, 1, 0x01
        do SPI.writeChar(224); do SPI.writeChar(15); do SPI.writeChar(15); do SPI.writeChar(49); do SPI.writeChar(43); do SPI.writeChar(12); do SPI.writeChar(14); // 0xE0, 15, 0x0F, 0x31, 0x2B, 0x0C, 0x0E
        do SPI.writeChar(224); do SPI.writeChar(10); do SPI.writeChar(8); do SPI.writeChar(78); do SPI.writeChar(241); do SPI.writeChar(55); do SPI.writeChar(7); // 0xE0, 10, 0x08, 0x4E, 0xF1, 0x37, 0x07
        do SPI.writeChar(224); do SPI.writeChar(5); do SPI.writeChar(16); do SPI.writeChar(3); do SPI.writeChar(14); do SPI.writeChar(9); do SPI.writeChar(0); // 0xE0, 5, 0x10, 0x03, 0x0E, 0x09, 0x00
        do SPI.writeChar(225); do SPI.writeChar(15); do SPI.writeChar(0); do SPI.writeChar(14); do SPI.writeChar(20); do SPI.writeChar(3); do SPI.writeChar(17); // 0xE1, 15, 0x00, 0x0E, 0x14, 0x03, 0x11
        do SPI.writeChar(225); do SPI.writeChar(10); do SPI.writeChar(7); do SPI.writeChar(49); do SPI.writeChar(193); do SPI.writeChar(72); do SPI.writeChar(8); // 0xE1, 10, 0x07, 0x31, 0xC1, 0x48, 0x08
        do SPI.writeChar(225); do SPI.writeChar(5); do SPI.writeChar(15); do SPI.writeChar(12); do SPI.writeChar(49); do SPI.writeChar(54); do SPI.writeChar(15); // 0xE1, 5, 0x0F, 0x0C, 0x31, 0x36, 0x0F
        do SPI.writeChar(17); do SPI.writeChar(128); // 0x11, 0x80
        do Sys.wait(150);
        do SPI.writeChar(41); do SPI.writeChar(128); // 0x29, 0x80
        do Sys.wait(150);

        // Fill the screen with blue color (RGB565 format for blue is 0x001F)
        while (true) {
            // Clear screen to black
            do Sys.fillScreen(0);   // 0x0000 - Black
            do Sys.wait(100000);

            // Clear screen to blue
            do Sys.fillScreen(31);   // 0x001F - Blue
            do Sys.wait(100000);
        }

        return;
    }
}
